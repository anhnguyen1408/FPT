import time
import pandas as pd
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import NoSuchElementException, TimeoutException
from webdriver_manager.chrome import ChromeDriverManager
import os

# H√†m chu·∫©n h√≥a chu·ªói
def chuan_hoa_text(text):
    if isinstance(text, str):
        return text.strip().replace('\u200b', '')
    return str(text).strip()

# ƒê·ªçc d·ªØ li·ªáu t·ª´ Excel
def doc_du_lieu(file_path):
    df = pd.read_excel(file_path, dtype=str)
    df = df[['M√£ s·ªë thu·∫ø', 'M√£ tra c·ª©u', 'URL']]
    df = df.applymap(chuan_hoa_text)
    return df

# M·ªü Chrome
def tao_trinh_duyet():
    download_path = os.path.abspath("hoa_don")
    os.makedirs(download_path, exist_ok=True)

    options = Options()
    options.add_argument("--start-maximized")
    prefs = {
        "download.default_directory": download_path,
        "download.prompt_for_download": False,
        "download.directory_upgrade": True,
        "safebrowsing.enabled": True
    }
    options.add_experimental_option("prefs", prefs)
    driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)
    return driver

# Tra c·ª©u h√≥a ƒë∆°n FPT v√† t·∫£i PDF/XML n·∫øu c√≥ th·ªÉ
def tra_cuu_fpt(driver, url, mst, ma_tra_cuu):
    driver.get(url)
    try:
        wait = WebDriverWait(driver, 15)

        input_mst = wait.until(EC.presence_of_element_located(
            (By.XPATH, '//input[@placeholder="MST b√™n b√°n"]')
        ))
        input_mst.clear()
        input_mst.send_keys(mst)

        input_matc = wait.until(EC.presence_of_element_located(
            (By.XPATH, '//input[@placeholder="M√£ tra c·ª©u h√≥a ƒë∆°n"]')
        ))
        input_matc.clear()
        input_matc.send_keys(ma_tra_cuu)
        input_matc.send_keys(Keys.ENTER)

        iframe = wait.until(EC.presence_of_element_located((By.TAG_NAME, 'iframe')))
        driver.switch_to.frame(iframe)

        try:
            first_row = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, 'table tbody tr')))
            first_row.click()
            print("‚úÖ ƒê√£ click v√†o k·∫øt qu·∫£")
            time.sleep(2)
        except:
            driver.switch_to.default_content()
            return "Kh√¥ng c√≥ k·∫øt qu·∫£ ƒë·ªÉ t·∫£i"

        try:
            btn_pdf = wait.until(EC.element_to_be_clickable((By.XPATH, '//button[span[contains(text(), "PDF")]]')))
            btn_pdf.click()
            print("üì• ƒê√£ click n√∫t t·∫£i PDF")
        except:
            print("‚ö† Kh√¥ng th·∫•y n√∫t PDF")

        try:
            btn_xml = wait.until(EC.element_to_be_clickable((By.XPATH, '//button[span[contains(@class, "mdi-xml")]]')))
            btn_xml.click()
            print("üì• ƒê√£ click n√∫t t·∫£i XML")
        except:
            print("‚ö† Kh√¥ng th·∫•y n√∫t XML")

        time.sleep(4)
        driver.switch_to.default_content()
        return "ƒê√£ t·∫£i PDF/XML n·∫øu c√≥"

    except Exception as e:
        driver.switch_to.default_content()
        return f"L·ªói khi tra c·ª©u: {str(e)}"

# Tra c·ª©u h√≥a ƒë∆°n MISA
def tra_cuu_misa(driver, url, ma_tra_cuu):
    driver.get(url)
    try:
        WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "txtCode"))).send_keys(ma_tra_cuu)
        driver.find_element(By.ID, "btnSearch").click()
        WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.CLASS_NAME, 'invoice-result')))
        return "Th√†nh c√¥ng"
    except Exception as e:
        return f"L·ªói: {str(e)}"

# Tra c·ª©u h√≥a ƒë∆°n BKAV
def tra_cuu_bkav(driver, url, ma_tra_cuu):
    driver.get(url)
    try:
        WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "txtInvoiceCode"))).send_keys(ma_tra_cuu)
        driver.find_element(By.ID, "btnSearch").click()
        WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, 'divResult')))
        return "Th√†nh c√¥ng"
    except Exception as e:
        return f"L·ªói: {str(e)}"

# Th√™m ƒëi·ªÅu ki·ªán ph√¢n trang theo URL t·ª´ input
def chay_tra_cuu():
    print("üöÄ B·∫Øt ƒë·∫ßu ch∆∞∆°ng tr√¨nh...")
    df = doc_du_lieu("input.xlsx")
    print("‚úÖ ƒê√£ ƒë·ªçc d·ªØ li·ªáu t·ª´ input.xlsx.")

    ket_qua = []
    driver = tao_trinh_duyet()
    print("üåê Tr√¨nh duy·ªát Chrome ƒë√£ s·∫µn s√†ng.")

    for index, row in df.iterrows():
        mst = row['M√£ s·ªë thu·∫ø'].strip()
        ma_tra_cuu = row['M√£ tra c·ª©u'].strip()
        url = row['URL'].strip().lower()
        print(f"üîç Tra c·ª©u: {url} | MST: {mst} | M√£TC: {ma_tra_cuu}")

        if "fpt" in url:
            trang_thai = tra_cuu_fpt(driver, url, mst, ma_tra_cuu)
        elif "misa" in url or "meinvoice.vn" in url:
            trang_thai = tra_cuu_misa(driver, url, ma_tra_cuu)
        elif "bkav" in url:
            trang_thai = tra_cuu_bkav(driver, url, ma_tra_cuu)
        else:
            trang_thai = "Kh√¥ng h·ªó tr·ª£ URL n√†y"

        ket_qua.append({
            "M√£ s·ªë thu·∫ø": mst,
            "M√£ tra c·ª©u": ma_tra_cuu,
            "URL": url,
            "Tr·∫°ng th√°i": trang_thai
        })
        time.sleep(2)

    driver.quit()
    pd.DataFrame(ket_qua).to_excel("ketqua.xlsx", index=False)
    print("‚úÖ ƒê√£ ghi k·∫øt qu·∫£ v√†o ketqua.xlsx")

if __name__ == "__main__":
    chay_tra_cuu()
